#include "sha1hash.h"

#include <cstring>

extern "C" {
#include "sha1impl.h"                   //NOSONAR
}

/**
 * @brief Sha1Hash::hash - Given a byte string (and length), calculate the SHA1 hash
 *      of the byte string.
 *
 * @param bytes - The bytes that we want to hash.
 * @param bytesLength - The length of the binary string (in bytes) pointed to by 'bytes'.
 *
 * @return unsigned char pointer containing the hash value.   The resulting hash value is
 *      owned by this object, and *MUST NOT* be freed by the caller!  On error, nullptr
 *      is returned.
 */
ByteArray Sha1Hash::hash(const ByteArray &toHash)
{
    ByteArray result;
    char hashResult[20];

    result.clear();

    SHA1(reinterpret_cast<char *>(&hashResult), toHash.toCharArrayPtr(), static_cast<int>(toHash.size()));

    result.fromCharArray(hashResult, 20);

    return result;
}

/**
 * @brief Sha1Hash::hashResultLength - Return the length of the result from the hash.
 *
 * @return 20, always.
 */
size_t Sha1Hash::hashResultLength()
{
    return 20;
}

/**
 * @brief Sha1Hash::hashBlockLength - Return the length of the hash generated by this
 *      hashing method.
 *
 * @return 64, always.
 */
size_t Sha1Hash::hashBlockLength()
{
    return 64;
}
