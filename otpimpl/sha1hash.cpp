#include "sha1hash.h"

extern "C" {
    #include "sha1impl.h"
}

#include <cstring>

/**
 * @brief Sha1Hash::hash - Given a byte string (and length), calculate the SHA1 hash
 *      of the byte string.
 *
 * @param bytes - The bytes that we want to hash.
 * @param bytesLength - The length of the binary string (in bytes) pointed to by 'bytes'.
 *
 * @return unsigned char pointer containing the hash value.   The resulting hash value is
 *      owned by this object, and *MUST NOT* be freed by the caller!  On error, nullptr
 *      is returned.
 */
unsigned char *Sha1Hash::hash(unsigned char *bytes, size_t bytesLength)
{
    if (bytes == nullptr) {
        // Nothing we can do.
        return nullptr;
    }

    memset(&mHashResult, 0x00, 20);

    SHA1(reinterpret_cast<char *>(&mHashResult), reinterpret_cast<char *>(bytes), static_cast<int>(bytesLength));

    return reinterpret_cast<unsigned char *>(&mHashResult);
}

/**
 * @brief Sha1Hash::hashResultLength - Return the length of the result from the hash.
 *
 * @return 20, always.
 */
size_t Sha1Hash::hashResultLength()
{
    return 20;
}

/**
 * @brief Sha1Hash::hashBlockLength - Return the length of the hash generated by this
 *      hashing method.
 *
 * @return 64, always.
 */
size_t Sha1Hash::hashBlockLength()
{
    return 64;
}
